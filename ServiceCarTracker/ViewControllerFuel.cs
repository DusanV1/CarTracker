// This file has been autogenerated from a class added in the UI designer.

using System;

using System.IO;
using Foundation;
using AppKit;
using StoreKit;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace ServiceCarTracker
{
	public partial class ViewControllerFuel : NSViewController
	{
		public ViewControllerFuel (IntPtr handle) : base (handle)
		{
		}

        public static FuelTableDataSource DataSource = new FuelTableDataSource();
        public int i = 0;

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

           

            //It loads twice for some reason
            if(i==0)
            {
               
                //If json exists load from json otherwise input line with zeroes
                string location = System.IO.Directory.GetCurrentDirectory();
                location = location.Substring(0, location.IndexOf("/bin"));
                if(File.Exists(location+"/Fuel.json"))
                {
                    DataSource.Fuels = JsonRead(location+"/Fuel.json");
                }else
                {
                    DataSource.Fuels.Add(new Fuel("-", 0,
                    0, 0, 0,
                    0, 0, "-"));
                }

                // Populate the Product Table
                PopulateTableFuels(DataSource);
                
            }

            i++;
        }

        private string GetTextDateFuel()
        {
            return TxtFldDateFuel.StringValue;
        }
        private string GetTextAmountFuel()
        {
            return TxtFldAmountFuel.StringValue;
        }
        private string GetTextCarMilageFuel()
        {
            return TxtFldCarMilageFuel.StringValue;
        }
        private string GetTextGasStationFuel()
        {
            return TxtFldGasStationFuel.StringValue;
        }
        private string GetTextPriceTotalFuel()
        {
            return TxtFldPriceTotalFuel.StringValue;
        }
        private string GetTextCarMilageFuelPrevious()
        {
            return TxtFldCarMilageFuel.StringValue;
        }
        private void ResetTxtFlds()
        {
            TxtFldDateFuel.StringValue = "";
            TxtFldAmountFuel.StringValue = "";
            TxtFldCarMilageFuel.StringValue = "";
            TxtFldGasStationFuel.StringValue = "";
            TxtFldPriceTotalFuel.StringValue = "";
        }
        public void ReloadTable()
        {
            FuelTable.ReloadData();
        }
        public void PopulateTableFuels(FuelTableDataSource dataSource)
        {
            // Populate the Product Table
            FuelTable.DataSource = dataSource;
            FuelTable.Delegate = new FuelTableDelegate(dataSource);
            ReloadTable();
        }

        public static void JsonStorage(List<Fuel> fuels, string location)
        {
            string jsonString = JsonSerializer.Serialize(fuels);
            File.WriteAllText(location, jsonString);
        }

        public static List<Fuel> JsonRead(string location)
        {
            string jsonString = File.ReadAllText(location);
            var fuelObjects = JsonSerializer.Deserialize<List<Fuel>>(jsonString);
            return fuelObjects;
        }


        partial void BtnUpdateTableFuel(NSButton sender)
        {
            PopulateTableFuels(DataSource);
        }

        partial void BtnDeleteRowFuel(NSButton sender)
        {
            //delete selected line
            nint row = FuelTable.SelectedRow;
            DataSource.Fuels.RemoveAt(Convert.ToInt32(row));
            ReloadTable();
        }


        partial void BtnInsertDataFuel(NSButton sender)
        {

            //calculate the rest of the values
            double amountFuel = Convert.ToDouble(GetTextAmountFuel());
            double carMilageFuel = Convert.ToDouble(GetTextCarMilageFuel());
            double priceTotalFuel = Convert.ToDouble(GetTextPriceTotalFuel());
            Fuel DataFuel = DataSource.Fuels[0];
            double carMilageFuelPrevious = DataFuel.FuelCarMilage;
            double pricePerLiterFuel = Math.Round(priceTotalFuel / amountFuel,2);
            double consumptionFuel = Math.Round(amountFuel / ((carMilageFuel - carMilageFuelPrevious) / 100),1);
            double pricePerKmFuel = Math.Round(pricePerLiterFuel / (100 / consumptionFuel),2);

            //insert data to first line (so the user doesnt have always scroll down
            DataSource.Fuels.Insert(0, (new Fuel(GetTextDateFuel(), amountFuel,
                priceTotalFuel, pricePerLiterFuel, carMilageFuel,
                consumptionFuel, pricePerKmFuel, GetTextGasStationFuel())));

            // Populate the Product Table
            PopulateTableFuels(DataSource);

            //reset text fields
            ResetTxtFlds();
            
        }
    }
}
