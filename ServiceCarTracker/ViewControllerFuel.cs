// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using StoreKit;

namespace ServiceCarTracker
{
	public partial class ViewControllerFuel : NSViewController
	{
		public ViewControllerFuel (IntPtr handle) : base (handle)
		{
		}

        public FuelTableDataSource DataSourceWhole = new FuelTableDataSource();
        

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            // Create the Product Table Data Source and populate it
            var DataSource = new FuelTableDataSource();
            
            //DataSource.Fuels.Add(new Fuel("1/18/2023", 41.68,
            //    1454.6, 34.9, 234142,
            //    6.9, 2.41, "Tank Ono"));

            DataSource.Fuels.Add(new Fuel("1/18/2023", 41.68,
                1454.6, 34.9, 234142,
                6.9, 2.41, "Tank Ono"));



            DataSourceWhole = DataSource;

            // Populate the Product Table
            FuelTable.DataSource = DataSource;
            FuelTable.Delegate = new FuelTableDelegate(DataSource);
        }

        private string GetTextDateFuel()
        {
            //check if it is blank -> show warning and let the user input the parameter again
            return TxtFldDateFuel.StringValue;
        }
        private string GetTextAmountFuel()
        {
            return TxtFldAmountFuel.StringValue;
        }
        private string GetTextCarMilageFuel()
        {
            return TxtFldCarMilageFuel.StringValue;
        }
        private string GetTextGasStationFuel()
        {
            return TxtFldGasStationFuel.StringValue;
        }
        private string GetTextPriceTotalFuel()
        {
            return TxtFldPriceTotalFuel.StringValue;
        }
        private string GetTextCarMilageFuelPrevious()
        {
            return TxtFldCarMilageFuel.StringValue;
        }
        private void ResetTxtFlds()
        {
            TxtFldDateFuel.StringValue = "";
            TxtFldAmountFuel.StringValue = "";
            TxtFldCarMilageFuel.StringValue = "";
            TxtFldGasStationFuel.StringValue = "";
            TxtFldPriceTotalFuel.StringValue = "";
        }
        public void ReloadTable()
        {
            FuelTable.ReloadData();
        }

        partial void BtnInsertDataFuel(NSButton sender)
        {
            var DataSource = new FuelTableDataSource();
            //DataSource.Products.Add(new Product(GetTextColumn1(), GetTextColumn2(), GetTextColumn3()));
            DataSource = DataSourceWhole;
            //DataSource.Products.Add(new Product(GetTextColumn1(), GetTextColumn2(), GetTextColumn3()));

            //calculate the rest of the values
            double amountFuel = Convert.ToDouble(GetTextAmountFuel());
            double carMilageFuel = Convert.ToDouble(GetTextCarMilageFuel());
            double priceTotalFuel = Convert.ToDouble(GetTextPriceTotalFuel());
            Fuel DataFuel = DataSource.Fuels[0];
            double carMilageFuelPrevious = DataFuel.FuelCarMilage;
            double pricePerLiterFuel = Math.Round(priceTotalFuel / amountFuel,2);
            double consumptionFuel = Math.Round(amountFuel / ((carMilageFuel - carMilageFuelPrevious) / 100),1);
            double pricePerKmFuel = Math.Round(pricePerLiterFuel / (100 / consumptionFuel),2);
            

            DataSource.Fuels.Insert(0, (new Fuel(GetTextDateFuel(), amountFuel,
                priceTotalFuel, pricePerLiterFuel, carMilageFuel,
                consumptionFuel, pricePerKmFuel, GetTextGasStationFuel())));



            // Populate the Product Table
            FuelTable.DataSource = DataSource;
            FuelTable.Delegate = new FuelTableDelegate(DataSource);
            //FuelTable.ReloadData();
            ReloadTable();

            DataSourceWhole = DataSource;
            ResetTxtFlds();
            //clear textfilds
        }
    }
}
